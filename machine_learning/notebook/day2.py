# -*- coding: utf-8 -*-
"""day2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rp5RkVAHyRY-cONeyRhve9i0f9O2W62-
"""

import numpy as np

arr = np.array([17, 20, 30, 22, 33, 18, 29, 89, 70])
print(arr)
print(f"berikut nilai rata-rata array: ,{np.mean(arr)}")
print(f"berikut nilai median array: ,{np.median(arr)}")
print(f"berikut nilai standar deviasi array: ,{np.std(arr)}")

import pandas as pd
data = {
    'Nama' : ['Dimas', 'Arya', 'Arjuna', 'Haikal', 'Yessica'],
    'Umur' : [19, 20, 19, 20, 21],
    'Hobi' : ['Nyanyi', 'Joget', 'olahraga', 'jalan-jalan', 'belajar']

}

df = pd.DataFrame(data)
print('berikut tabel nama uji coba saya: ')
display(df)

import pandas as pd
import numpy as np

# UnicodeDecodeError
# Masalah: Pandas gagal baca file karena beda "bahasa".
# Solusi: Kasih tahu Pandas "bahasa"-nya pakai encoding.
# Opsi: Coba 'latin-1' atau pakai chardet buat deteksi otomatis.

df = pd.read_csv('data.csv', encoding='latin-1')
display(df.head())
display(df.info())
display(df.describe())

print(df.isnull().sum())

# Data cleaning adalah proses membersihkan dataset dari missing values (data kosong), duplikasi, dan kesalahan agar analisis lebih akurat.

# 📌 Metode Cleaning Missing Values:
# 1️⃣ Hapus Data Kosong → Jika jumlahnya sedikit (<5%).
# 2️⃣ Isi dengan Mean (Rata-rata) → Cocok untuk data normal tanpa outlier (misalnya tinggi badan).
# 3️⃣ Isi dengan Median (Nilai Tengah) → Cocok untuk data dengan outlier (misalnya gaji karyawan).
# 4️⃣ Isi dengan Modus (Nilai Terbanyak) → Cocok untuk data kategori (misalnya jenis kelamin).

# 💡 Data yang bersih = Analisis lebih akurat & keputusan lebih tepat! 🚀

df = df.fillna({'Description' : df['Description'].mode()[0], 'CustomerID' : df['CustomerID'].median()})
print('data yabg telah siap pakai; ')
display(df)
print(df.isnull().sum())
jumlah_pelanngan = len(df)
print(f"Jumlah pelanggan yang melakukan pembelian: {jumlah_pelanngan}")

display(df['StockCode'].value_counts().head(10))  # Produk yang paling sering muncul

df['Revenue'] = df['Quantity'] * df['UnitPrice']  # Buat kolom revenue
df.groupby('StockCode')['Revenue'].sum().sort_values(ascending=False).head(10)

import seaborn as sns
import matplotlib.pyplot as plt

# Agregasi data
revenue_per_product = df.groupby('StockCode')['Revenue'].sum().reset_index()

# Urutkan berdasarkan Revenue dan ambil top 10
top_10_products = revenue_per_product.sort_values(by='Revenue', ascending=False).head(10)

# Visualisasi dengan bar chart
plt.figure(figsize=(12, 6))  # Sesuaikan ukuran figure jika perlu
sns.barplot(x='StockCode', y='Revenue', data=top_10_products)
plt.title('Top 10 Produk dengan Pendapatan Tertinggi')
plt.xlabel('Kode Produk (StockCode)')
plt.ylabel('Total Pendapatan (Revenue)')
plt.xticks(rotation=45, ha='right')  # Rotasi label sumbu x agar tidak tumpang tindih
plt.tight_layout()
plt.show()

